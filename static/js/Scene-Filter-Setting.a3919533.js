const r="<template>\r\n  <div class=\"cesiumContainer\" id=\"cesiumContainer\"></div>\r\n</template>\r\n\r\n<script setup>\r\nimport * as Cesium from 'cesium'\r\nimport { onBeforeUnmount, onMounted } from 'vue'\r\n\r\nlet viewer\r\nconst params = {\r\n  alpha: 1.0,\r\n  nightAlpha: 1.0,\r\n  dayAlpha: 1.0,\r\n  brightness: 1.0,\r\n  contrast: 0.5,\r\n  hue: 0.5,\r\n  saturation: 0.5,\r\n  gamma: 0.5\r\n}\r\nconst gui = new dat.GUI()\r\n\r\nonMounted(() => {\r\n  Cesium.Ion.defaultAccessToken = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJqdGkiOiI0ZTgxZDQzNi1kZDJhLTQ4MDItYmE3MC0xMmRhYTJlNDViYzQiLCJpZCI6NDM0MzQsImlhdCI6MTY3NzEzMjQwNn0.LUp8czTsGuciTiyYSkA3JxK9gxTy-VYmIcFcS2ow134'\r\n  viewer = new Cesium.Viewer('cesiumContainer', {\r\n    animation: false, // 是否创建动画小器件，左下角仪表\r\n    baseLayerPicker: false, // 是否显示图层选择器\r\n    fullscreenButton: false, // 是否显示全屏按钮\r\n    vrButton: false, // 用于切换 VR 模式的单个按钮小部件。\r\n    geocoder: false, // //是否显示geocoder小器件，右上角查询按钮\r\n    homeButton: false, // 是否显示Home按钮\r\n    infoBox: false, // 是否显示信息框\r\n    sceneModePicker: false, // 是否显示3D/2D选择器\r\n    selectionIndicator: false, // 是否显示选取指示器组件\r\n    timeline: false, // 是否显示时间轴\r\n    navigationHelpButton: false, // 是否显示右上角的帮助按钮\r\n    navigationInstructionsInitiallyVisible: false,\r\n    scene3DOnly: false, // 如果设置为true，则所有几何图形以3D模式绘制以节约GPU资源\r\n    shouldAnimate: false, // 初始化是否开始动画\r\n    baseLayer: false,\r\n    contextOptions: {\r\n      webgl: {\r\n        alpha: true\r\n      }\r\n    }\r\n  })\r\n\r\n  viewer.scene.fxaa = true\r\n  viewer.scene.postProcessStages.fxaa.enabled = true\r\n  if (Cesium.FeatureDetection.supportsImageRenderingPixelated()) {\r\n    // 判断是否支持图像渲染像素化处理\r\n    viewer.resolutionScale = window.devicePixelRatio\r\n  }\r\n\r\n  const filterParams = {\r\n    bInvertColor: true,\r\n    bFilterColor: true,\r\n    filterColor: '#0044aa'\r\n  }\r\n\r\n  // 天地图影像\r\n  const tk = 'c3d89f4316203ec50d5240dd7b58da1b'\r\n  const layer = 'vec'\r\n  const type = 'w'\r\n  const imageryProvider = new Cesium.UrlTemplateImageryProvider({\r\n    url: 'https://t{z}.tianditu.gov.cn/' + layer + '_' + type + '/wmts?SERVICE=WMTS&REQUEST=GetTile&VERSION=1.0.0&LAYER=' + layer + '&STYLE=default&TILEMATRIXSET=' + type + '&FORMAT=tiles&TILEMATRIX={z}&TILEROW={y}&TILECOL={x}&tk=' + tk,\r\n    subdomains: ['0', '1', '2', '3']\r\n  })\r\n  const tileLayer = viewer.imageryLayers.addImageryProvider(imageryProvider)\r\n  tileLayer.brightness = 0.6\r\n  tileLayer.contrast = 1.8\r\n  tileLayer.gamma = 0.3\r\n  tileLayer.hue = 1\r\n  tileLayer.saturation = 0\r\n  filterLayer(filterParams)\r\n\r\n  // 地形深度测试\r\n  viewer.scene.globe.depthTestAgainstTerrain = true\r\n  // 背景色\r\n  viewer.scene.globe.baseColor = new Cesium.Color(0.0, 0.0, 0.0, 0)\r\n\r\n  // gui面板\r\n  initGui(tileLayer)\r\n})\r\n\r\nonBeforeUnmount(() => {\r\n  gui.destroy()\r\n})\r\n\r\nfunction initGui(tileLayer) {\r\n  gui.add(params, 'alpha', 0, 1).step(0.01).onChange(function () {\r\n    tileLayer.alpha = params.alpha\r\n  })\r\n  gui.add(params, 'nightAlpha', 0, 1).step(0.01).onChange(function () {\r\n    tileLayer.nightAlpha = params.nightAlpha\r\n  })\r\n  gui.add(params, 'dayAlpha', 0, 1).step(0.01).onChange(function () {\r\n    tileLayer.dayAlpha = params.dayAlpha\r\n  })\r\n  gui.add(params, 'brightness', 0, 1).step(0.01).onChange(function () {\r\n    tileLayer.brightness = params.brightness\r\n  })\r\n  gui.add(params, 'contrast', 0, 2).step(0.01).onChange(function () {\r\n    tileLayer.contrast = params.contrast\r\n  })\r\n  gui.add(params, 'hue', 0, 1).step(0.01).onChange(function () {\r\n    tileLayer.hue = params.hue\r\n  })\r\n  gui.add(params, 'saturation', 0, 1).step(0.01).onChange(function () {\r\n    tileLayer.saturation = params.saturation\r\n  })\r\n  gui.add(params, 'gamma', 0, 10).step(0.01).onChange(function () {\r\n    tileLayer.gamma = params.gamma\r\n  })\r\n}\r\n\r\nfunction filterLayer(options) {\r\n  const { bInvertColor, bFilterColor, filterColor } = options\r\n  const color = Cesium.Color.fromCssColorString(filterColor)\r\n  const filterRGB = [\r\n    Math.round(color.red * 255),\r\n    Math.round(color.green * 255),\r\n    Math.round(color.blue * 255)\r\n  ]\r\n  const fragShader = viewer.scene.globe._surfaceShaderSet.baseFragmentShaderSource.sources\r\n  for (let i = 0; i < fragShader.length; i++) {\r\n    const strS = 'color = czm_saturation(color, textureSaturation);\\n#endif\\n'\r\n    let strT = 'color = czm_saturation(color, textureSaturation);\\n#endif\\n'\r\n    if (bInvertColor) {\r\n      strT += `\r\n        color.r = 1.0 - color.r;\r\n        color.g = 1.0 - color.g;\r\n        color.b = 1.0 - color.b;\r\n      `\r\n    }\r\n    if (bFilterColor) {\r\n      strT += `\r\n        color.r = color.r * ${filterRGB[0]}.0/255.0;\r\n        color.g = color.g * ${filterRGB[1]}.0/255.0;\r\n        color.b = color.b * ${filterRGB[2]}.0/255.0;\r\n      `\r\n    }\r\n    fragShader[i] = fragShader[i].replace(strS, strT)\r\n  }\r\n}\r\n<\/script>\r\n<style scoped>\r\n.cesiumContainer {\r\n    width: 100%;\r\n    height: 100%;\r\n    overflow: hidden;\r\n  }\r\n</style>\r\n";export{r as default};
