const n='<template>\r\n  <div class="container">\r\n    <div class="btn_wrapper">\r\n      <el-button type="default" size="small" @click="toggleSkybox(\'blue-sky\')">蓝天</el-button>\r\n      <el-button type="default" size="small" @click="toggleSkybox(\'sun\')">晴天</el-button>\r\n      <el-button type="default" size="small" @click="toggleSkybox(\'sunset-glow\')">晚霞</el-button>\r\n      <el-button type="default" size="small" @click="toggleSkybox(\'night\')">夜晚</el-button>\r\n      <el-button type="default" size="small" @click="toggleSkybox(\'normal\')">关闭</el-button>\r\n    </div>\r\n    <div class="cesiumContainer" id="cesiumContainer"></div>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport * as Cesium from \'cesium\'\r\nimport { onMounted } from \'vue\'\r\n\r\nlet viewer\r\n\r\nonMounted(async () => {\r\n  Cesium.Ion.defaultAccessToken =\r\n    \'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJqdGkiOiJmZTA1MDQ2NC0wZmYwLTRhZWMtYWY4OC1jY2JkMDU1NjVmOGMiLCJpZCI6NDM0MzQsImlhdCI6MTY0OTkzNjc0Mn0.nafX1X_3586auU738TC3DxvsiSvPxnQ3TmamqUkb8kw\'\r\n  viewer = new Cesium.Viewer(\'cesiumContainer\', {\r\n    timeline: false, // 是否显示时间轴\r\n    fullscreenButton: false, // 是否显示全屏按钮\r\n    animation: false, // 是否创建动画小器件，左下角仪表\r\n    baseLayerPicker: false, // 是否显示图层选择器\r\n    vrButton: false, // 用于切换 VR 模式的单个按钮小部件。\r\n    geocoder: false, // //是否显示geocoder小器件，右上角查询按钮\r\n    homeButton: false, // 是否显示Home按钮\r\n    infoBox: false, // 是否显示信息框\r\n    sceneModePicker: false, // 是否显示3D/2D选择器\r\n    selectionIndicator: false, // 是否显示选取指示器组件\r\n    navigationHelpButton: false, // 是否显示右上角的帮助按钮\r\n    navigationInstructionsInitiallyVisible: false,\r\n    contextOptions: { webgl: { alpha: true, preserveDrawingBuffer: true }, requestWebgl1: true } // webgl1\r\n  })\r\n  const control = viewer.scene.screenSpaceCameraController\r\n  control.tiltEventTypes = Cesium.CameraEventType.RIGHT_DRAG\r\n  control.zoomEventTypes = [\r\n    Cesium.CameraEventType.WHEEL,\r\n    Cesium.CameraEventType.PINCH\r\n  ]\r\n\r\n  const position = Cesium.Cartesian3.fromDegrees(113.297730, 23.060679, 5000)\r\n  viewer.camera.setView({\r\n    destination: position,\r\n    orientation: {\r\n      heading: 0,\r\n      pitch: Cesium.Math.toRadians(-10),\r\n      roll: 0\r\n    }\r\n  })\r\n\r\n  toggleSkybox(\'blue-sky\')\r\n})\r\n\r\nfunction toggleSkybox(type) {\r\n  const skyboxConf = {\r\n    \'blue-sky\': GroundSkyBoxBlueSky,\r\n    \'sun\': GroundSkyBoxSun,\r\n    \'sunset-glow\': GroundSkyBoxSunsetGlow,\r\n    \'night\': GroundSkyBoxNight\r\n  }\r\n  const skyboxResource = skyboxConf[type]\r\n  if (!skyboxResource) {\r\n    currentSkyBox.destroy()\r\n    return\r\n  }\r\n  // 天空盒\r\n  const defaultSkyBox = viewer.scene.skyBox\r\n  const currentSkyBox = new GroundSkyBox(viewer, {\r\n    sources: skyboxResource,\r\n    defaultSkyBox: defaultSkyBox\r\n  })\r\n  viewer.scene.skyBox = currentSkyBox\r\n  currentSkyBox.renderer(currentSkyBox)\r\n}\r\n\r\n<\/script>\r\n<style scoped>\r\n.container {\r\n  position: relative;\r\n  width: 100%;\r\n  height: 100%;\r\n  .cesiumContainer {\r\n    width: 100%;\r\n    height: 100%;\r\n    overflow: hidden\r\n  }\r\n  .btn_wrapper {\r\n    position: absolute;\r\n    left: 50px;\r\n    top: 10px;\r\n    z-index: 1;\r\n  }\r\n}\r\n\r\n</style>\r\n';export{n as default};
